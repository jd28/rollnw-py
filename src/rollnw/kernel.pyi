from . import Area as Area, Container as Container, Creature as Creature, Door as Door, Effect as Effect, Encounter as Encounter, GameVersion as GameVersion, Image as Image, Item as Item, Module as Module, ObjectBase as ObjectBase, ObjectHandle as ObjectHandle, Placeable as Placeable, Resource as Resource, ResourceData as ResourceData, ResourceType as ResourceType, StaticTwoDA as StaticTwoDA, Store as Store, Trigger as Trigger, Waypoint as Waypoint

class ConfigOptions:
    include_install: bool
    include_nwsync: bool
    include_user: bool

class Config:
    def initialize(self, options: ConfigOptions): ...
    def install_path(self) -> str: ...
    def options(self) -> ConfigOptions: ...
    def user_path(self) -> str: ...
    def set_paths(self, install: str, user: str): ...
    def set_version(self, version: GameVersion): ...

class EffectSystemStats:
    free_list_size: int
    pool_size: int

class EffectSystem:
    def add_effect(self, type, apply, remove) -> None: ...
    def add_itemprop(self, type, generator) -> None: ...
    def apply(self, obj: ObjectBase, effect: Effect) -> bool: ...
    def create(self, type) -> Effect: ...
    def destroy(self, effect: Effect) -> None: ...
    def ip_cost_table(self, table: int) -> StaticTwoDA | None: ...
    def ip_definition(self, type) -> None: ...
    def ip_param_table(self, table: int) -> StaticTwoDA | None: ...
    def itemprops(self) -> StaticTwoDA: ...
    def remove(self, obj: ObjectBase, effect: Effect) -> bool: ...
    def stats(self) -> EffectSystemStats: ...

class Objects:
    def area(self, resref: str) -> Area: ...
    def creature(self, resref: str) -> Creature: ...
    def destroy(self, obj: ObjectHandle) -> None: ...
    def door(self, resref: str) -> Door: ...
    def encounter(self, resref: str) -> Encounter: ...
    def get(self, handle: ObjectHandle): ...
    def get_by_tag(self, tag: str, nth: int = 0) -> ObjectBase | None: ...
    def item(self, resref: str) -> Item: ...
    def placeable(self, resref: str) -> Placeable: ...
    def store(self, resref: str) -> Store: ...
    def trigger(self, resref: str) -> Trigger: ...
    def valid(self, handle: ObjectHandle) -> bool: ...
    def waypoint(self, resref: str) -> Waypoint: ...

class Resources(Container):
    def __init__(self, parent: Resources) -> None: ...
    def demand_any(self, resref: str, restypes: list[ResourceType]) -> ResourceData: ...
    def demand_in_order(self, resref: str, restypes: list[ResourceType]) -> ResourceData: ...
    def demand_server_vault(self, cdkey: str, resref: str) -> ResourceData: ...
    def texture(self, resref: str) -> Image | None: ...

class Rules: ...
class Strings: ...

class TwoDACache:
    def get(self, name: str | Resource) -> StaticTwoDA | None: ...

def config() -> None: ...
def load_module(path: str, instantiate: bool = True) -> Module: ...
def effects() -> EffectSystem: ...
def objects() -> Objects: ...
def resman() -> Resources: ...
def rules() -> Rules: ...
def start(options: ConfigOptions | None): ...
def strings() -> Strings: ...
def twodas() -> TwoDACache: ...
def unload_module() -> None: ...
