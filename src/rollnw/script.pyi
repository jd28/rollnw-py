import enum
from . import Location as Location
from typing import Iterator

class NssTokenType(enum.IntEnum):
    INVALID = ...
    END = ...
    IDENTIFIER = ...
    LPAREN = ...
    RPAREN = ...
    LBRACE = ...
    RBRACE = ...
    LBRACKET = ...
    RBRACKET = ...
    COMMA = ...
    COLON = ...
    QUESTION = ...
    SEMICOLON = ...
    POUND = ...
    DOT = ...
    AND = ...
    ANDAND = ...
    ANDEQ = ...
    DIV = ...
    DIVEQ = ...
    EQ = ...
    EQEQ = ...
    GT = ...
    GTEQ = ...
    LT = ...
    LTEQ = ...
    MINUS = ...
    MINUSEQ = ...
    MINUSMINUS = ...
    MOD = ...
    MODEQ = ...
    TIMES = ...
    TIMESEQ = ...
    NOT = ...
    NOTEQ = ...
    OR = ...
    OREQ = ...
    OROR = ...
    PLUS = ...
    PLUSEQ = ...
    PLUSPLUS = ...
    SL = ...
    SLEQ = ...
    SR = ...
    SREQ = ...
    TILDE = ...
    USR = ...
    USREQ = ...
    XOR = ...
    XOREQ = ...
    FLOAT_CONST = ...
    INTEGER_CONST = ...
    OBJECT_INVALID_CONST = ...
    OBJECT_SELF_CONST = ...
    STRING_CONST = ...
    STRING_RAW_CONST = ...
    ACTION = ...
    BREAK = ...
    CASE = ...
    CASSOWARY = ...
    CONST = ...
    CONTINUE = ...
    DEFAULT = ...
    DO = ...
    EFFECT = ...
    ELSE = ...
    EVENT = ...
    FLOAT = ...
    FOR = ...
    IF = ...
    INT = ...
    ITEMPROPERTY = ...
    JSON = ...
    LOCATION = ...
    OBJECT = ...
    RETURN = ...
    STRING = ...
    STRUCT = ...
    SQLQUERY = ...
    SWITCH = ...
    TALENT = ...
    VECTOR = ...
    VOID = ...
    WHILE = ...
    JSON_CONST = ...
    LOCATION_INVALID = ...

class Context:
    def __init__(self, include_paths: list[str] = [], command_script: str = 'nwscript') -> None: ...
    def add_include_path(self, path: str): ...
    def command_script(self) -> Nss | None: ...
    def get(self, resref: str, is_command_script: bool = False) -> Nss | None: ...

class DiagnosticType(enum.IntEnum):
    lexical = ...
    parse = ...
    semantic = ...

class DiagnosticSeverity(enum.IntEnum):
    error = ...
    hint = ...
    information = ...
    warning = ...

class Diagnostic:
    type: DiagnosticType
    severity: DiagnosticSeverity
    script: str
    message: str
    location: SourceRange

class Include:
    resref: str
    location: SourceRange
    script: Nss
    used: int

class Comment: ...

class SignatureHelp:
    decl: Declaration
    expr: CallExpression
    active_param: int

class Ast:
    defines: dict[str, str]
    includes: list[Include]
    def __getitem__(self, index: int) -> Declaration: ...
    def __iter__(self) -> Iterator[Declaration]: ...
    def __len__(self) -> int: ...
    def comments(self) -> list[Comment]: ...
    def find_comment(self, line) -> str: ...

class Nss:
    def __init__(self, path: str, ctx: Context, is_command_script: bool = False) -> None: ...
    def ast(self) -> Ast: ...
    def complete(self, needle: str) -> list['Symbol']: ...
    def complete_at(self, needle: str, line: int, character: int) -> list['Symbol']: ...
    def complete_dot(self, needle: str, line: int, character: int) -> list['Symbol']: ...
    def diagnostics(self) -> list[Diagnostic]: ...
    def errors(self) -> int: ...
    def exports(self) -> list['Symbol']: ...
    def locate_export(self, is_type: bool, search_dependencies: bool = False) -> Symbol: ...
    def locate_symbol(self, symbol: str, line: int, character: int) -> Symbol: ...
    def name(self) -> str: ...
    def parse(self) -> None: ...
    def process_includes(self) -> None: ...
    def resolve(self) -> None: ...
    def signature_help(self, line: int, character: int) -> SignatureHelp: ...
    def view_from_range(self, range: SourceRange) -> str: ...
    def warnings(self) -> int: ...
    @staticmethod
    def from_string(string: str, ctx: Context, is_command_script: bool = False) -> Nss: ...

class NssLexer:
    def __init__(self, script: str) -> None: ...
    def current(self) -> None: ...
    def next(self) -> None: ...

class SourcePosition:
    column: int
    line: int

class SourceRange:
    start: SourcePosition
    end: SourcePosition

class SourceLocation:
    range: SourceRange
    def length(self) -> int: ...
    def view(self) -> str: ...

class SymbolKind(enum.IntEnum):
    variable = ...
    function = ...
    type = ...
    param = ...
    field = ...

class Symbol:
    node: AstNode | None
    decl: Declaration
    comment: str
    type: str
    kind: SymbolKind
    provider: Nss
    view: str

class InlayHint:
    message: str
    position: SourcePosition

class NssToken:
    type: NssTokenType
    loc: SourceLocation

class AstNode:
    def complete(self, needle: str) -> list['Symbol']: ...

class Expression(AstNode): ...

class AssignExpression(Expression):
    lhs: VariableExpression | DotExpression
    operator: NssToken
    rhs: Expression

class BinaryExpression(Expression):
    lhs: Expression
    operator: NssToken
    rhs: Expression

class CallExpression(Expression):
    expr: Expression
    def __len__(self) -> int: ...
    def __getitem__(self, idx: int) -> Expression: ...
    def __iter__(self) -> Iterator[Expression]: ...

class ComparisonExpression(Expression):
    lhs: Expression
    operator: NssToken
    rhs: Expression

class ConditionalExpression(Expression):
    test: Expression
    true_branch: Statement
    false_branch: Statement

class DotExpression(Expression):
    lhs: VariableExpression | CallExpression
    rhs: VariableExpression

class EmptyExpression(Expression): ...

class GroupingExpression(Expression):
    expr: Expression

class LiteralExpression(Expression):
    data: int | str | float | Location
    literal: NssToken

class LiteralVectorExpression(Expression):
    x: NssToken
    y: NssToken
    z: NssToken

class LogicalExpression(Expression):
    lhs: Expression
    operator: NssToken
    rhs: Expression

class PostfixExpression(Expression):
    lhs: Expression
    operator: NssToken

class UnaryExpression(Expression):
    operator: NssToken
    rhs: Expression

class VariableExpression(Expression):
    var: NssToken

class Statement(AstNode): ...

class BlockStatement(Statement):
    def __len__(self) -> int: ...
    def __getitem__(self, idx: int) -> Statement: ...
    def __iter__(self) -> Iterator[Statement]: ...

class DoStatement(Statement):
    block: BlockStatement
    test: Expression

class EmptyStatement(Statement): ...

class ExprStatement(Statement):
    expr: Expression

class IfStatement(Statement):
    test: Expression
    true_branch: Statement
    false_branch: Statement

class ForStatement(Statement):
    init: AstNode | None
    test: Expression | None
    increment: Expression | None
    block: Statement

class JumpStatement(Statement):
    operator: NssToken
    expr: Expression | None

class LabelStatement(Statement):
    label: NssToken
    expr: Expression | None

class SwitchStatement(Statement):
    target: Expression
    block: BlockStatement

class WhileStatement(Statement):
    test: Expression
    block: Statement

class Declaration(Statement):
    def identifier(self) -> str: ...

class FunctionDecl(Declaration):
    def __len__(self) -> int: ...
    def __getitem__(self, idx: int) -> Declaration: ...
    def __iter__(self) -> Iterator[Declaration]: ...

class FunctionDefinition(Declaration):
    decl: FunctionDecl
    block: BlockStatement

class StructDecl(Declaration):
    def __len__(self) -> int: ...
    def __getitem__(self, idx: int) -> Declaration: ...
    def __iter__(self) -> Iterator[Declaration]: ...

class VarDecl(Declaration):
    init: Expression | None

class DeclList(Declaration):
    def __len__(self) -> int: ...
    def __getitem__(self, idx: int) -> Declaration: ...
    def __iter__(self) -> Iterator[Declaration]: ...
